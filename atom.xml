<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://changyihsin.github.io/atom.xml" rel="self"/>
  <link href="http://changyihsin.github.io/"/>
  <updated>2013-06-03T12:31:54+08:00</updated>
  <id>http://changyihsin.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript - Typed arrays, ArrayBuffer and DataView]]></title>
    <link href="http://changyihsin.github.io/blog/2013/06/03/octopress-howto/"/>
    <updated>2013-06-03T12:19:00+08:00</updated>
    <id>http://changyihsin.github.io/blog/2013/06/03/octopress-howto</id>
    <content type="html"><![CDATA[<p>JavaScript - </p>

<h2>Typed arrays</h2>

<p>It has become clear that there are times when it would be helpful for JavaScript code to be able to quickly and easily manipulate raw binary data.In the past, this had to be simulated by treating the raw data as a string and using the charCodeAt() method to read the bytes from the data buffer.</p>

<p>Consider this C structure:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">someStruct</span> <span class="p">{</span>
</span><span class='line'><span class="err"> </span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">id</span><span class="p">;</span>
</span><span class='line'><span class="err"> </span> <span class="kt">char</span> <span class="n">username</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'><span class="err">  </span><span class="kt">float</span> <span class="n">amountDue</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can access a buffer containing data in this format like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ArrayBuffer</span><span class="p">(</span><span class="mi">24</span><span class="p">);</span>
</span><span class='line'><span class="c1">// ... read the data into the buffer ...</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">idView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Uint32Array</span><span class="p">(</span><span class="nx">buffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">usernameView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="nx">buffer</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">amountDueView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">buffer</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ArrayBuffer</h2>

<p>The ArrayBuffer is a data type that is used to represent a generic, fixed-length binary data buffer. You can&rsquo;t directly manipulate the contents of an ArrayBuffer; instead, you create an ArrayBufferView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ArrayBuffer</span><span class="p">(</span><span class="mi">32</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>DataView</h2>

<p>An ArrayBuffer is a useful object for representing an arbitrary chunk of data. In many cases, such data will be read from disk or from the network, and will not follow the alignment restrictions that are imposed on the Typed Array Views described earlier. In addition, the data will often be heterogeneous in nature and have a defined byte order.
The DataView view provides a low-level interface for reading such data from and writing it to an ArrayBuffer.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ArrayBuffer</span><span class="p">(</span><span class="nx">NTP_PACKET_SIZE</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DataView</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Set the first byte.</span>
</span><span class='line'><span class="nx">data</span><span class="p">.</span><span class="nx">setUint8</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">NTP_MODE_CLIENT</span> <span class="o">|</span> <span class="p">(</span><span class="nx">NTP_VERSION</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">3</span><span class="p">));</span>
</span><span class='line'><span class="c1">// Set the 40th byte. </span>
</span><span class='line'><span class="nx">data</span><span class="p">.</span><span class="nx">setUint32</span><span class="p">(</span><span class="nx">TRANSMIT_TIME_OFFSET</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Set the 44th byte. </span>
</span><span class='line'><span class="nx">data</span><span class="p">.</span><span class="nx">setUint32</span><span class="p">(</span><span class="nx">TRANSMIT_TIME_OFFSET</span><span class="o">+</span><span class="mi">4</span><span class="p">,</span> <span class="nx">f</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Trick to check the Endian type of architecture your script is running: </p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">littleEndian</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="err">  </span><span class="kd">var</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ArrayBuffer</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="err">  </span><span class="k">new</span> <span class="nx">DataView</span><span class="p">(</span><span class="nx">buffer</span><span class="p">).</span><span class="nx">setInt16</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'><span class="err">  </span><span class="k">return</span> <span class="k">new</span> <span class="nx">Int16Array</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="mi">256</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reference:</h2>

<p>DataView:<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays/DataView">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays/DataView</a>
ArrayBuffer:<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays/ArrayBuffer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays/ArrayBuffer</a>
Typed Array Specification:<a href="http://www.khronos.org/registry/typedarray/specs/latest/">http://www.khronos.org/registry/typedarray/specs/latest/</a></p>
]]></content>
  </entry>
  
</feed>
